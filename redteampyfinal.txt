from flask import Flask, render_template, request, jsonify
import docker

app = Flask(__name__)
client = docker.from_env()

containers_info = {
    "web-dvwa": {
        "image": "ncontador/adadvwav2",
        "name": "web-dvwa",
        "ports": {"80/tcp": 8081}
    },
    "mutillidae": {
        "image": "ncontador/adamutillidae",
        "name": "mutillidae",
        "ports": {"80/tcp": 8082}
    },
    "bwapp": {
        "image": "ncontador/adabwapp",
        "name": "bwapp",
        "ports": {"80/tcp": 8083}
    },
    "arnoldo": {
        "image": "ncontador/arnoldo",
        "name": "arnoldo",
        "ports": {"80/tcp": 8084}
    },
    "asimov": {
        "image": "ncontador/asimov",
        "name": "asimov",
        "ports": {"80/tcp": 8085}
    },
    "vulnerablewordpress": {
        "image": "tutum/wordpress",
        "name": "vulnerablewordpress",
        "ports": {"80/tcp": 8086}
    },
    "altoromutual": {
        "image": "archstein/altoromutual",
        "name": "altoromutual",
        "ports": {"8080/tcp": 8087}
    },
    "apache2449": {
        "image": "ncontador/apache2449",
        "name": "apache2449",
        "ports": {"80/tcp": 8088}
    },
    "apache2450": {
        "image": "ncontador/apache2450",
        "name": "apache2450",
        "ports": {"80/tcp": 8089}
    }
}

container_access_info = {}

@app.route('/')
def index():
    containers = client.containers.list(all=True)
    return render_template('index.html', containers=containers, containers_info=containers_info, container_access_info=container_access_info)

@app.route('/start', methods=['POST'])
def start_container():
    container_name = request.form.get('name')
    container_info = containers_info.get(container_name)
    if container_info:
        try:
            container = client.containers.get(container_info["name"])
            container.start()
            print(f"Starting existing container: {container_info['name']}")
        except docker.errors.NotFound:
            container = client.containers.run(container_info["image"], name=container_info["name"], ports=container_info["ports"], detach=True)
            print(f"Running new container: {container_info['name']}")
        
        container.reload()
        host_port = list(container_info["ports"].values())[0]
        container_access_info[container_info["name"]] = f'localhost:{host_port}'
        print(f"Container {container_info['name']} started at localhost:{host_port}")
        
        return jsonify({
            'status': 'Container started',
            'name': container.name,
            'access': f'http://localhost:{host_port}'
        })
    return jsonify({'status': 'Container not found'}), 404



@app.route('/stop', methods=['POST'])
def stop_container():
    container_name = request.form.get('name')
    try:
        container = client.containers.get(container_name)
        container.stop()
        container.remove()
        container_access_info.pop(container_name, None)
        return jsonify({'status': 'Container stopped and removed', 'name': container.name})
    except docker.errors.NotFound:
        return jsonify({'status': 'Container not found'}), 404

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
